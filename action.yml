name: 'GKI Kernel Module Build Action'
description: 'An action to build Android GKI kernel modules.'

branding:
  icon: 'activity'
  color: 'blue'

inputs:
  tag:
    description: 'Specify the Android kernel version and tag to build for (e.g., common-android12-5.10).'
    required: true
  arch:
    description: 'Specify the architecture to build for (e.g., aarch64 or x86_64).'
    required: true
    default: 'aarch64'

runs:
  using: "composite"
  steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 8192
        temp-reserve-mb: 2048
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
    
    - name: Install Build Tools
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: binutils git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libx11-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python3 libelf-dev binutils-aarch64-linux-gnu gcc gzip
        version: 1.0

    - name: Setup Android Kernel Source Code
      shell: bash
      run: |
        sudo apt-get install -y repo
        mkdir android-kernel && cd android-kernel
        repo init -u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
        repo sync -c -j$(nproc) --no-tags
        df -h

    - name: Setup CCache
      uses: actions/cache@v4
      with:
        path: ~/.ccache-${{ inputs.tag }}
        key: gki-kernel-${{ inputs.tag }}-cache

    - name: Setup Kernel Module
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/android-kernel
        echo "[+] Kernel Module setup"
        GKI_ROOT=$(pwd)
        echo "[+] GKI_ROOT: $GKI_ROOT"
        echo "[+] Copy driver to $GKI_ROOT/common/drivers"
        cp -rf $GITHUB_WORKSPACE/../.github/hello-ko $GKI_ROOT/common/drivers/hello-ko
        echo "[+] Add driver to Makefile"
        DRIVER_MAKEFILE=$GKI_ROOT/common/drivers/Makefile
        DRIVER_KCONFIG=$GKI_ROOT/common/drivers/Kconfig
        grep -q "hello-ko" "$DRIVER_MAKEFILE" || printf "\nobj-m += hello-ko/\n" >> "$DRIVER_MAKEFILE"
        grep -q "hello-ko" "$DRIVER_KCONFIG" || sed -i "/endmenu/i\\source \"drivers/hello-ko/Kconfig\"" "$DRIVER_KCONFIG"
        # Ensure hello-ko Makefile exists
        if [ ! -f $GKI_ROOT/common/drivers/hello-ko/Makefile ]; then
          echo "obj-m += hello-ko.o" > $GKI_ROOT/common/drivers/hello-ko/Makefile
        fi

    - name: Setup for LKM
      shell: bash
      working-directory: android-kernel
      run: |
        pip install ast-grep-cli
        sudo apt-get install llvm-15 -y
        ast-grep -U -p '$$$ check_exports($$$) {$$$}' -r '' common/scripts/mod/modpost.c
        ast-grep -U -p 'check_exports($$$);' -r '' common/scripts/mod/modpost.c
        echo "drivers/hello-ko/hello-ko.ko" >> common/android/gki_aarch64_modules

        # bazel build, android14-5.15, android14-6.1 use bazel
        if [ ! -e build/build.sh ]; then
          sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
          if [ -e common/modules.bzl ]; then
            sed -i 's/_COMMON_GKI_MODULES_LIST = \[/_COMMON_GKI_MODULES_LIST = \[ "drivers\/hello-ko\/hello-ko.ko",/g' common/modules.bzl
          fi
        else
          TARGET_FILE="build/kernel/build.sh"
          if [ ! -e "$TARGET_FILE" ]; then
            TARGET_FILE="build/build.sh"
          fi
          sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' $TARGET_FILE || echo "No unknown symbol in $TARGET_FILE"
          sed -i 's/if ! diff -u "\${KERNEL_DIR}\/\${MODULES_ORDER}" "\${OUT_DIR}\/modules\.order"; then/if false; then/g' $TARGET_FILE
          sed -i 's@${ROOT_DIR}/build/abi/compare_to_symbol_list@echo@g' $TARGET_FILE
          sed -i 's/needs unknown symbol/Dont abort when unknown symbol/g' build/kernel/*.sh || echo "No unknown symbol scripts found"
        fi

    - name: Make working directory clean to avoid dirty
      shell: bash
      working-directory: android-kernel
      run: |
        repo status
        rm common/android/abi_gki_protected_exports_* || echo "No protected exports!"
        git config --global user.email "bot@github.actions.org"
        git config --global user.name "github.actions"
        cd common/ && git add -A && git commit -a -m "Add Kernel Module"
        repo status

    - name: Build Kernel
      shell: bash
      working-directory: android-kernel
      run: |
        if [[ "${{ inputs.tag }}" == "android16-6.12" ]]; then
          if [ "${{ inputs.arch }}" = "aarch64" ]; then
            tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist
          elif [ "${{ inputs.arch }}" = "x86_64" ]; then
            tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_x86_64_dist
          fi
        else
          if [ "${{ inputs.arch }}" = "aarch64" ]; then
            if [ -e build/build.sh ]; then
              LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
            else
              tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist
            fi
          elif [ "${{ inputs.arch }}" = "x86_64" ]; then
            if [ -e build/build.sh ]; then
              LTO=thin BUILD_CONFIG=common/build.config.gki.x86_64 build/build.sh CC="/usr/bin/ccache clang"
            else
              tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_x86_64_dist -- --dist_dir=dist
            fi
          fi
        fi

    - name: Prepare Artifacts
      shell: bash
      run: |
        if [[ "${{ inputs.tag }}" == "android16-6.12" ]]; then
          if [ "${{ inputs.arch }}" = "aarch64" ]; then
            OUTDIR=android-kernel/out/kernel_aarch64/dist
          elif [ "${{ inputs.arch }}" = "x86_64" ]; then
            OUTDIR=android-kernel/out/kernel_x86_64/dist
          fi
        else
          OUTDIR=android-kernel/out/${{ inputs.tag }}/dist
          if [ ! -e $OUTDIR ]; then
            OUTDIR=android-kernel/dist
          fi
        fi
        mkdir output
        ls -al $OUTDIR/
        cp $OUTDIR/*Image* ./output/
        cp $OUTDIR/hello-ko.ko ./output/${{ inputs.tag }}_hello-ko.ko

    - name: Upload Kernel Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Image-${{ inputs.tag }}-${{ inputs.arch }}
        path: ./output/*
