name: GKI Kernel Module Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Output directory of GKI, for example: android13-5.15"
        required: true
        type: string
      tag:
        description: "Branch name of common kernel manifest, for example: android13-5.15"
        required: true
        type: string

jobs:
  build:
    name: Build Kernel for ${{ inputs.version }}
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Android Kernel Source Code
        run: |
          sudo apt-get install -y repo
          mkdir android-kernel && cd android-kernel
          repo init -u https://android.googlesource.com/kernel/manifest -b common-${{ inputs.tag }} --repo-rev=v2.16
          repo sync -c -j$(nproc) --no-tags
          df -h

      - name: Setup CCache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: gki-kernel-${{ inputs.version }}-cache

      - name: Build Kernel
        working-directory: android-kernel
        run: |
          if [ -e build/build.sh ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
          else
            tools/bazel run --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist -- --dist_dir=dist

      - name: Prepare Artifacts
        run: |
          OUTDIR=android-kernel/out/${{ inputs.version }}/dist
          if [ ! -e $OUTDIR ]; then
            OUTDIR=android-kernel/dist
          fi
          mkdir output
          ls -al $OUTDIR/
          cp $OUTDIR/Image ./output/
          cp $OUTDIR/Image.lz4 ./output/

      - name: Upload Kernel Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ inputs.version }}
          path: ./output/*
